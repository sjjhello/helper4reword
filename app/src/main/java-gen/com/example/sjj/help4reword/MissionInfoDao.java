package com.example.sjj.help4reword;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.sjj.help4reword.MissionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MISSION_INFO".
*/
public class MissionInfoDao extends AbstractDao<MissionInfo, Long> {

    public static final String TABLENAME = "MISSION_INFO";

    /**
     * Properties of entity MissionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Reword = new Property(2, String.class, "reword", false, "REWORD");
        public final static Property Context = new Property(3, String.class, "context", false, "CONTEXT");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Deadline = new Property(5, String.class, "deadline", false, "DEADLINE");
        public final static Property User_id = new Property(6, Integer.class, "user_id", false, "USER_ID");
    };


    public MissionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MissionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MISSION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"REWORD\" TEXT NOT NULL ," + // 2: reword
                "\"CONTEXT\" TEXT NOT NULL ," + // 3: context
                "\"LOCATION\" TEXT," + // 4: location
                "\"DEADLINE\" TEXT," + // 5: deadline
                "\"USER_ID\" INTEGER);"); // 6: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MISSION_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MissionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getReword());
        stmt.bindString(4, entity.getContext());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String deadline = entity.getDeadline();
        if (deadline != null) {
            stmt.bindString(6, deadline);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MissionInfo readEntity(Cursor cursor, int offset) {
        MissionInfo entity = new MissionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // reword
            cursor.getString(offset + 3), // context
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deadline
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MissionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setReword(cursor.getString(offset + 2));
        entity.setContext(cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeadline(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MissionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MissionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
